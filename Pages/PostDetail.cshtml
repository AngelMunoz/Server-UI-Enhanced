@page "{id}"
@model PostDetailModel
@{
    ViewData["Title"] = $"{Model.Post.Title}";
}

@* In this case we will render the important bits directly from the server
    (the post title and content) everything else will be delayed to the UI and knockout
    this can be done using knockout components (check wwwroot/site.js) *@
<article id="post-details" class="container content card">
    <section class="card-content">
        <header>
            <h1 class="title is-capitalized">@Model?.Post?.Title</h1>
            @* we use the data-* attributes to give information to knockout what to do
                after the javascript code kicks in *@
            <section data-user-id="@Model?.Post?.UserId" class="author-section">
                <!-- ko if: (status() === 'Loading') -->
                <progress class="progress is-small is-info" max="100"></progress>
                <!-- /ko -->
                <!-- ko if: (status() === 'Initialized') -->
                <div>
                    <label>Author:</label> <b data-bind="text: user.name"></b>
                </div>
                <div>
                    <label>Email:</label> <b data-bind="text: user.email"></b> <br />
                    <label>At:</label> <b data-bind="text: user.company.name"></b> <br />
                </div>
                <!-- /ko -->
            </section>
        </header>
        <p class="box">@Model?.Post?.Body</p>
        <section id="comments-section" class="box">
            @* defined in wwwroot/site.js *@
            <my-post-comments params="postId: @Model.Post.Id"></my-post-comments>
        </section>
    </section>
</article>


@section Scripts {
<script>
    function UserVM() {
        var self = this;
        // only observe what will change
        self.status = ko.observable("Loading")
        // you can use ajax/jquery if necessary
        fetch("https://jsonplaceholder.typicode.com/users/" + document.querySelector(".author-section").dataset.userId)
            .then(function(response) {
                if (!response.ok) throw new Error(response.statusText)
                return response.json()
            })
            .then(function(user) {
                // if the object won't be manipulated don't use observables
                // just use the object
                self.user = user;
                self.status("Initialized")
            })
            .catch(function(error) { console.warn(error.message) });

    }
    // call to enable a particular view model and particular section
    ko.applyBindings(new UserVM(), document.querySelector(".author-section"));
    // call to enable components
    ko.applyBindings(undefined, document.querySelector("#comments-section"));
</script>
}

@section Styles {
<style>

</style>
}